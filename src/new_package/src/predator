#!/usr/bin/env python

import rospy, actionlib

from new_package.msg import GoToAction, GoToGoal
from turtlesim.msg import Pose
from geometry_msgs.msg import Twist

class Turtle_details:

    def __init__(self, name):

        self.name = name

        self.sub_pose = rospy.Subscriber(self.name + '/pose', Pose, self.updatePose)
        self.sub_vel = rospy.Subscriber(self.name + '/cmd_vel', Twist, self.alive)

        self.initialize_vars()

    def initialize_vars(self):

        self.x = 0
        self.y = 0

        self.alive = True

    def updatePose(self, msg):

        self.x = msg.x
        self.y = msg.y

    def alive(self, msg):

        if msg.linear.x == 0:
            self.alive = False
        else:
            self.alive = True

class Predator:

    def __init__(self):

        rospy.init_node('Predator')

        self.predator = actionlib.SimpleActionClient('goTo', GoToAction)
        self.predator.wait_for_server()

        self.T1 = Turtle_details('turtle1')
        self.T2 = Turtle_details('turtle2')
        self.T3 = Turtle_details('turtle3')

        self.goal = GoToGoal()
        self.goal.x = 0
        self.goal.y = 0

        self.rate = rospy.Rate(10)

    def decide_turtle(self):

        T2_dist = ((self.T1.x - self.T2.x)**2 + (self.T1.y - self.T2.y)**2)**0.5
        T3_dist = ((self.T1.x - self.T3.x)**2 + (self.T1.y - self.T3.y)**2)**0.5

        if self.T2.alive and not self.T3.alive:
            return 'T2'
        elif self.T3.alive and not self.T2.alive:
            return 'T3'
        elif self.T2.alive and self.T3.alive:
            if T2_dist <= T3_dist:
                return 'T2'
            else:
                return 'T3'
        else:
            return 'wait'

    def chase(self):

        while not rospy.is_shutdown():
            target = self.decide_turtle()

            if target == 'T2':
                goal_dist = ((self.goal.x - self.T2.x)**2 + (self.goal.y - self.T2.y)**2)**0.5
                if goal_dist > 0.4:
                    self.goal.x = self.T2.x
                    self.goal.y = self.T2.y
                    self.predator.send_goal(self.goal)

            elif target == 'T3':
                goal_dist = ((self.goal.x - self.T3.x)**2 + (self.goal.y - self.T3.y)**2)**0.5
                if goal_dist > 0.4:
                    self.goal.x = self.T3.x
                    self.goal.y = self.T3.y
                    self.predator.send_goal(self.goal)

            else:
                pass

            self.rate.sleep()

if __name__ == '__main__':

    predator = Predator()
    predator.chase()
