#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
from math import pi

from turtlesim.srv import TeleportRelative

rospy.wait_for_service('turtle1/teleport_relative')

teleport = rospy.ServiceProxy('turtle1/teleport_relative', TeleportRelative)

rospy.init_node('TurtleController')

pub_vel = rospy.Publisher('turtle1/cmd_vel', Twist, queue_size = 1)

message = Twist()

def command_callback(msg):
    command = msg.data

    message.linear.y = 0
    message.linear.z = 0
    message.angular.x = 0
    message.angular.y = 0

    if command == 'forward':
        message.linear.x = 1
        message.angular.z = 0
    elif command == 'backward':
        message.linear.x = -1
        message.angular.z = 0
    elif command == 'turn_left':
        message.linear.x = 0
        message.angular.z = 1
    elif command == 'turn_right':
        message.linear.x = 0
        message.angular.z = -1
    else:
        message.linear.x = 0
        message.angular.z = 0

    pub_vel.publish(message)

def outside_boundary(x,y):

    center_x = 5
    center_y = 5
    radius = 3

    relative_x = x - center_x
    relative_y = y - center_y

    if (relative_x**2 + relative_y**2) > (radius**2):
        return True
    else:
        return False

def pose_callback(msg):
    x_coordinate = msg.x
    y_coordinate = msg.y

    if outside_boundary(x_coordinate, y_coordinate):
        teleport(0, pi)

sub_pose = rospy.Subscriber('turtle1/pose', Pose, pose_callback)
sub = rospy.Subscriber('command', String, command_callback)
rospy.spin()
